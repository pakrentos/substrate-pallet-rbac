
//! Autogenerated weights for `pallet_rbac`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-qwerty.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-rbac
// --extrinsic=*
// --wasm-execution=compiled
// --output=weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_rbac.
pub trait WeightInfo {
	fn create_role() -> Weight;
	fn remove_role() -> Weight;
	fn add_call() -> Weight;
	fn remove_call() -> Weight;
	fn assign_role() -> Weight;
	fn unassign_role() -> Weight;
	fn dispatch_call_with_role() -> Weight;
}

/// Weight functions for `pallet_rbac`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn create_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3598`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn remove_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `3598`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:1)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn add_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `4511`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4511))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:1)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn remove_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `4511`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4511))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:1)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	fn assign_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `4534`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4534))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:1)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	fn unassign_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4534`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4534))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:2 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:0)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn dispatch_call_with_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `6206`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6206))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn create_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3598`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn remove_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `3598`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:1)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn add_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `4511`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4511))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:1)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn remove_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `4511`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4511))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:1)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	fn assign_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `4534`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4534))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:1 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:1)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	fn unassign_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4534`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4534))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `Roles::Roles` (r:2 w:1)
	/// Proof: `Roles::Roles` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(1069), added: 3544, mode: `MaxEncodedLen`)
	/// Storage: `Roles::CallRoles` (r:1 w:0)
	/// Proof: `Roles::CallRoles` (`max_values`: None, `max_size`: Some(1046), added: 3521, mode: `MaxEncodedLen`)
	fn dispatch_call_with_role() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `6206`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6206))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
